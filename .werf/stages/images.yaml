{{- $ImagesBuildFiles := .Files.Glob "images/*/{Dockerfile,werf.inc.yaml}" }}

{{- range $path, $content := $ImagesBuildFiles  }}
  {{- $ctx := dict }}
  {{- $_ := set $ctx "ImageName" ($path | split "/")._1 }}
  {{- $_ := set $ctx "ImagePath" (printf "/images/%s" $ctx.ImageName) }}
  {{- $_ := set $ctx "ModuleNamePrefix" "" }}
  {{- $_ := set $ctx "GOPROXY" "https://proxy.golang.org,direct" }}
  {{- $_ := set $ctx "SOURCE_REPO" "false" }}
  {{- $_ := set $ctx "Files" $.Files }}
---
  {{- /* For Dockerfile just render it from the folder. */ -}}
  {{- if not (regexMatch "/werf.inc.yaml$" $path) }}
    {{- if not (hasKey $ImagesBuildFiles (printf "images/%s/werf.inc.yaml" $ctx.ImageName)) }}
image: {{ $ctx.ImageName }}
context: images/{{ $ctx.ImageName }}
dockerfile: Dockerfile
staged: {{ env "STAGED_DOCKERFILE" "false" }}
      {{- if (regexMatch "--mount=type=ssh" $content) }}
ssh: default
      {{- end }}
    {{- end }}
  {{- /* For werf.inc.yaml render content by providing the ImageName param. */ -}}
  {{- else }}
{{ tpl $content $ctx }}
  {{- end }}
{{- end }}
