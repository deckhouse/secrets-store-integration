diff --git a/cmd/secrets-store-csi-driver/main.go b/cmd/secrets-store-csi-driver/main.go
index ef3dcc5e..eae4bb28 100644
--- a/cmd/secrets-store-csi-driver/main.go
+++ b/cmd/secrets-store-csi-driver/main.go
@@ -52,7 +52,7 @@ import (
 
 var (
 	endpoint           = flag.String("endpoint", "unix://tmp/csi.sock", "CSI endpoint")
-	driverName         = flag.String("drivername", "secrets-store.csi.k8s.io", "name of the driver")
+	driverName         = flag.String("drivername", "secrets-store.csi.deckhouse.io", "name of the driver")
 	nodeID             = flag.String("nodeid", "", "node id")
 	logFormatJSON      = flag.Bool("log-format-json", false, "set log formatter to json")
 	providerVolumePath = flag.String("provider-volume", "/var/run/secrets-store-csi-providers", "Volume path for provider")
@@ -151,15 +151,6 @@ func mainErr() error {
 						},
 					),
 				},
-				// this enables filtered watch of secrets based on the label (eg. secrets-store.csi.k8s.io/managed=true)
-				// added to the secrets created by the CSI driver
-				&corev1.Secret{}: {
-					Label: labels.SelectorFromSet(
-						labels.Set{
-							controllers.SecretManagedLabel: "true",
-						},
-					),
-				},
 			},
 		}),
 	})
@@ -199,10 +190,6 @@ func mainErr() error {
 		}
 	}()
 
-	go func() {
-		reconciler.RunPatcher(ctx)
-	}()
-
 	// token request client
 	kubeClient := kubernetes.NewForConfigOrDie(cfg)
 	tokenClient := k8s.NewTokenClient(kubeClient, *driverName, 10*time.Minute)
diff --git a/controllers/secretproviderclasspodstatus_controller.go b/controllers/secretproviderclasspodstatus_controller.go
index 8fbee8c1..8803238e 100644
--- a/controllers/secretproviderclasspodstatus_controller.go
+++ b/controllers/secretproviderclasspodstatus_controller.go
@@ -27,7 +27,6 @@ import (
 	"sigs.k8s.io/secrets-store-csi-driver/pkg/client/clientset/versioned/scheme"
 	"sigs.k8s.io/secrets-store-csi-driver/pkg/util/fileutil"
 	"sigs.k8s.io/secrets-store-csi-driver/pkg/util/k8sutil"
-	"sigs.k8s.io/secrets-store-csi-driver/pkg/util/secretutil"
 
 	corev1 "k8s.io/api/core/v1"
 	apierrors "k8s.io/apimachinery/pkg/api/errors"
@@ -280,91 +279,6 @@ func (r *SecretProviderClassPodStatusReconciler) Reconcile(ctx context.Context,
 		return ctrl.Result{}, fmt.Errorf("secret provider class pod status volume name did not match pod Volume for pod %s/%s", req.Namespace, spcPodStatus.Status.PodName)
 	}
 
-	files, err := fileutil.GetMountedFiles(spcPodStatus.Status.TargetPath)
-	if err != nil {
-		r.generateEvent(pod, corev1.EventTypeWarning, secretCreationFailedReason, fmt.Sprintf("failed to get mounted files, err: %+v", err))
-		klog.ErrorS(err, "failed to get mounted files", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "spcps", klog.KObj(spcPodStatus))
-		return ctrl.Result{RequeueAfter: 10 * time.Second}, err
-	}
-	errs := make([]error, 0)
-	for _, secretObj := range spc.Spec.SecretObjects {
-		secretName := strings.TrimSpace(secretObj.SecretName)
-
-		if err = secretutil.ValidateSecretObject(*secretObj); err != nil {
-			klog.ErrorS(err, "failed to validate secret object in spc", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "spcps", klog.KObj(spcPodStatus))
-			errs = append(errs, fmt.Errorf("failed to validate secret object in spc %s/%s, err: %w", spc.Namespace, spc.Name, err))
-			continue
-		}
-		exists, err := r.secretExists(ctx, secretName, req.Namespace)
-		if err != nil {
-			klog.ErrorS(err, "failed to check if secret exists", "secret", klog.ObjectRef{Namespace: req.Namespace, Name: secretName}, "spc", klog.KObj(spc), "pod", klog.KObj(pod), "spcps", klog.KObj(spcPodStatus))
-			// syncSecret.enabled is set to false by default in the helm chart for installing the driver in v0.0.23+
-			// that would result in a forbidden error, so generate a warning that can be helpful for debugging
-			if apierrors.IsForbidden(err) {
-				klog.Warning(SyncSecretForbiddenWarning)
-			}
-			errs = append(errs, fmt.Errorf("failed to check if secret %s exists, err: %w", secretName, err))
-			continue
-		}
-
-		var funcs []func() (bool, error)
-
-		if !exists {
-			secretType := secretutil.GetSecretType(strings.TrimSpace(secretObj.Type))
-
-			var datamap map[string][]byte
-			if datamap, err = secretutil.GetSecretData(secretObj.Data, secretType, files); err != nil {
-				r.generateEvent(pod, corev1.EventTypeWarning, secretCreationFailedReason, fmt.Sprintf("failed to get data in spc %s/%s for secret %s, err: %+v", req.Namespace, spcName, secretName, err))
-				klog.ErrorS(err, "failed to get data in spc for secret", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "secret", klog.ObjectRef{Namespace: req.Namespace, Name: secretName}, "spcps", klog.KObj(spcPodStatus))
-				errs = append(errs, fmt.Errorf("failed to get data in spc %s/%s for secret %s, err: %w", req.Namespace, spcName, secretName, err))
-				continue
-			}
-
-			labelsMap := make(map[string]string)
-			if secretObj.Labels != nil {
-				labelsMap = secretObj.Labels
-			}
-			annotationsMap := make(map[string]string)
-			if secretObj.Annotations != nil {
-				annotationsMap = secretObj.Annotations
-			}
-			// Set secrets-store.csi.k8s.io/managed=true label on the secret that's created and managed
-			// by the secrets-store-csi-driver. This label will be used to perform a filtered list watch
-			// only on secrets created and managed by the driver
-			labelsMap[SecretManagedLabel] = "true"
-
-			createFn := func() (bool, error) {
-				if err := r.createK8sSecret(ctx, secretName, req.Namespace, datamap, labelsMap, annotationsMap, secretType); err != nil {
-					klog.ErrorS(err, "failed to create Kubernetes secret", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "secret", klog.ObjectRef{Namespace: req.Namespace, Name: secretName}, "spcps", klog.KObj(spcPodStatus))
-					// syncSecret.enabled is set to false by default in the helm chart for installing the driver in v0.0.23+
-					// that would result in a forbidden error, so generate a warning that can be helpful for debugging
-					if apierrors.IsForbidden(err) {
-						klog.Warning(SyncSecretForbiddenWarning)
-					}
-					return false, nil
-				}
-				return true, nil
-			}
-			funcs = append(funcs, createFn)
-		}
-
-		for _, f := range funcs {
-			if err := wait.ExponentialBackoff(wait.Backoff{
-				Steps:    5,
-				Duration: 1 * time.Millisecond,
-				Factor:   1.0,
-				Jitter:   0.1,
-			}, f); err != nil {
-				r.generateEvent(pod, corev1.EventTypeWarning, secretCreationFailedReason, err.Error())
-				return ctrl.Result{RequeueAfter: 5 * time.Second}, err
-			}
-		}
-	}
-
-	if len(errs) > 0 {
-		return ctrl.Result{Requeue: true}, nil
-	}
-
 	klog.InfoS("reconcile complete", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "spcps", klog.KObj(spcPodStatus))
 	// requeue the spc pod status again after 5mins to check if secret and ownerRef exists
 	// and haven't been modified. If secret doesn't exist, then this requeue will ensure it's
diff --git a/pkg/rotation/reconciler.go b/pkg/rotation/reconciler.go
index e82d12f7..51cac3e7 100644
--- a/pkg/rotation/reconciler.go
+++ b/pkg/rotation/reconciler.go
@@ -145,11 +145,6 @@ func (r *Reconciler) runErr(stopCh <-chan struct{}) error {
 	ticker := time.NewTicker(r.rotationPollInterval)
 	defer ticker.Stop()
 
-	if err := r.secretStore.Run(stopCh); err != nil {
-		klog.ErrorS(err, "failed to run informers for rotation reconciler")
-		return err
-	}
-
 	// TODO (aramase) consider adding more workers to process reconcile concurrently
 	for i := 0; i < 1; i++ {
 		go wait.Until(r.runWorker, time.Second, stopCh)
@@ -462,58 +457,6 @@ func (r *Reconciler) reconcile(ctx context.Context, spcps *secretsstorev1.Secret
 		klog.InfoS("spc doesn't contain secret objects", "spc", klog.KObj(spc), "pod", klog.KObj(pod), "controller", "rotation")
 		return nil
 	}
-	files, err := fileutil.GetMountedFiles(spcps.Status.TargetPath)
-	if err != nil {
-		r.generateEvent(pod, corev1.EventTypeWarning, k8sSecretRotationFailedReason, fmt.Sprintf("failed to get mounted files, err: %+v", err))
-		return fmt.Errorf("failed to get mounted files, err: %w", err)
-	}
-	for _, secretObj := range spc.Spec.SecretObjects {
-		secretName := strings.TrimSpace(secretObj.SecretName)
-
-		if err = secretutil.ValidateSecretObject(*secretObj); err != nil {
-			r.generateEvent(pod, corev1.EventTypeWarning, k8sSecretRotationFailedReason, fmt.Sprintf("failed validation for secret object in spc %s/%s, err: %+v", spc.Namespace, spc.Name, err))
-			klog.ErrorS(err, "failed validation for secret object in spc", "spc", klog.KObj(spc), "controller", "rotation")
-			errs = append(errs, err)
-			continue
-		}
-
-		secretType := secretutil.GetSecretType(strings.TrimSpace(secretObj.Type))
-		var datamap map[string][]byte
-		if datamap, err = secretutil.GetSecretData(secretObj.Data, secretType, files); err != nil {
-			r.generateEvent(pod, corev1.EventTypeWarning, k8sSecretRotationFailedReason, fmt.Sprintf("failed to get data in spc %s/%s for secret %s, err: %+v", spc.Namespace, spc.Name, secretName, err))
-			klog.ErrorS(err, "failed to get data in spc for secret", "spc", klog.KObj(spc), "secret", klog.ObjectRef{Namespace: spc.Namespace, Name: secretName}, "controller", "rotation")
-			errs = append(errs, err)
-			continue
-		}
-
-		patchFn := func() (bool, error) {
-			// patch secret data with the new contents
-			if err := r.patchSecret(ctx, secretObj.SecretName, spcps.Namespace, datamap); err != nil {
-				// syncSecret.enabled is set to false by default in the helm chart for installing the driver in v0.0.23+
-				// that would result in a forbidden error, so generate a warning that can be helpful for debugging
-				if apierrors.IsForbidden(err) {
-					klog.Warning(controllers.SyncSecretForbiddenWarning)
-				}
-				klog.ErrorS(err, "failed to patch secret data", "secret", klog.ObjectRef{Namespace: spc.Namespace, Name: secretName}, "spc", klog.KObj(spc), "controller", "rotation")
-				return false, nil
-			}
-			return true, nil
-		}
-
-		if err := wait.ExponentialBackoff(wait.Backoff{
-			Steps:    5,
-			Duration: 1 * time.Millisecond,
-			Factor:   1.0,
-			Jitter:   0.1,
-		}, patchFn); err != nil {
-			r.generateEvent(pod, corev1.EventTypeWarning, k8sSecretRotationFailedReason, fmt.Sprintf("failed to patch secret %s with new data, err: %+v", secretName, err))
-			// continue to ensure error in a single secret doesn't block the updates
-			// for all other secret objects defined in SPC
-			continue
-		}
-		r.generateEvent(pod, corev1.EventTypeNormal, k8sSecretRotationCompleteReason, fmt.Sprintf("successfully rotated K8s secret %s", secretName))
-	}
-
 	// for errors with individual secret objects in spc, we continue to the next secret object
 	// to prevent error with one secret from affecting rotation of all other k8s secret
 	// this consolidation of errors within the loop determines if the spc pod status still needs
diff --git a/pkg/secrets-store/nodeserver.go b/pkg/secrets-store/nodeserver.go
index e2af8dcd..e995132b 100644
--- a/pkg/secrets-store/nodeserver.go
+++ b/pkg/secrets-store/nodeserver.go
@@ -65,7 +65,7 @@ const (
 	// CSIPodServiceAccountTokens is the service account tokens of the pod that the mount is created for
 	CSIPodServiceAccountTokens = "csi.storage.k8s.io/serviceAccount.tokens" //nolint
 
-	secretProviderClassField = "secretProviderClass"
+	secretProviderClassField = "secretsStoreImport"
 )
 
 //gocyclo:ignore
@@ -201,6 +201,7 @@ func (ns *nodeServer) NodePublishVolume(ctx context.Context, req *csi.NodePublis
 	}
 
 	// ensure it's read-only
+	req.Readonly = true
 	if !req.GetReadonly() {
 		return nil, status.Error(codes.InvalidArgument, "Readonly is not true in request")
 	}
diff --git a/pkg/util/k8sutil/volume.go b/pkg/util/k8sutil/volume.go
index ef922251..08b28bc8 100644
--- a/pkg/util/k8sutil/volume.go
+++ b/pkg/util/k8sutil/volume.go
@@ -33,7 +33,7 @@ func SPCVolume(pod *corev1.Pod, driverName, spcName string) *corev1.Volume {
 		if vol.CSI.Driver != driverName {
 			continue
 		}
-		if vol.CSI.VolumeAttributes["secretProviderClass"] != spcName {
+		if vol.CSI.VolumeAttributes["secretsStoreImport"] != spcName {
 			continue
 		}
 		return vol
